<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring核心特性技术</title>
      <link href="/2022/12/16/spring-he-xin-te-xing/"/>
      <url>/2022/12/16/spring-he-xin-te-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring核心特性"><a href="#Spring核心特性" class="headerlink" title="Spring核心特性"></a>Spring核心特性</h1><ul><li>IOC容器（Ioc Container）</li><li>Spring事件（Events）</li><li>资源管理（Resources）</li><li>国际化（i18n）</li><li>校验（Validation）</li><li>数据绑定（Data Binding）</li><li>类型转换（Type Conversion）</li><li>Spring表达式（Spring Express Language）</li><li>面向切面编程（AOP）</li></ul><h1 id="Spring数据存储（Data-Access）"><a href="#Spring数据存储（Data-Access）" class="headerlink" title="Spring数据存储（Data Access）"></a>Spring数据存储（Data Access）</h1><ul><li>JDBC</li><li>事务抽象（Transactions）：来源于EJB，再EJB上进行封装</li><li>DAO支持（DAO Support）</li><li>O/R映射（O/R Mapping）</li><li>XML编列（XML Marshalling）</li></ul><h1 id="Web技术"><a href="#Web技术" class="headerlink" title="Web技术"></a>Web技术</h1><ul><li>Web Servlet 技术栈<ul><li>Spring MVC</li><li>WebSocket</li><li>SockJS</li></ul></li><li>Web Reactive 技术栈<ul><li>Spring WebFlux</li><li>WebClient（Spring5之前 RestTemplate和HttpClient）<ul><li>同步执行变成了异步回调</li></ul></li><li>WebSocket</li></ul></li></ul><h1 id="技术整合"><a href="#技术整合" class="headerlink" title="技术整合"></a>技术整合</h1><ul><li>远程调用（Remoting）</li><li>Java消息服务（JMS）</li><li>Java连接架构（JCA）<ul><li>资源连接 例如JDBC</li></ul></li><li>Java管理扩展（JMX）<ul><li>运维相关东西，CPU等相关信息，Bean的动态观察</li></ul></li><li>Java邮件客户端（Email）</li><li>本地任务（Tasks）</li><li>本地调度（Scheduling）</li><li>缓存对象（Caching）</li><li>Spring测试（Testing）<ul><li>模拟对象（Mock Objects）</li><li>TestContext框架</li><li>Spring MVC测试</li><li>Web测试客户端（WebTestClient）</li></ul></li></ul><h1 id="Spring编程模型"><a href="#Spring编程模型" class="headerlink" title="Spring编程模型"></a>Spring编程模型</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>契约接口：Aware、BeanPostProcessor</li><li>设计模式：观察者模式、组合模式、模板模式</li><li>对象继承：Abstract* 类</li></ul><h2 id="面向切面"><a href="#面向切面" class="headerlink" title="面向切面"></a>面向切面</h2><ul><li>动态代理：JdkDynamicAopProxy</li><li>字节码提升：ASM、CGLIB、AspectJ</li></ul><h2 id="面向元注解"><a href="#面向元注解" class="headerlink" title="面向元注解"></a>面向元注解</h2><ul><li>注解模式：@Component、@Service、@Respository</li><li>配置：Environment抽象、PropertySources、BeanDefinition</li><li>泛型：GenericTypeResolver、ResolvableType</li></ul><h2 id="驱动函数"><a href="#驱动函数" class="headerlink" title="驱动函数"></a>驱动函数</h2><ul><li><p>函数接口：ApplicationEventPublisher</p><p>Reactive：Spring WebFlux</p></li></ul><h2 id="模块驱动"><a href="#模块驱动" class="headerlink" title="模块驱动"></a>模块驱动</h2><ul><li>Maven Artifacts</li><li>OSGI Bundles</li><li>JAVA9 Moudles</li><li>Spring @Enable*</li></ul>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> IOC </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringIOC概述</title>
      <link href="/2022/12/16/springioc-rong-qi-gai-shu/"/>
      <url>/2022/12/16/springioc-rong-qi-gai-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="传统IOC实现策略"><a href="#传统IOC实现策略" class="headerlink" title="传统IOC实现策略"></a>传统IOC实现策略</h1><blockquote><p>使用java原生IOC容器实现Bean的管理</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IntrospectionException</span> <span class="token punctuation">{</span>    <span class="token class-name">BeanInfo</span> beanInfo <span class="token operator">=</span> <span class="token class-name">Introspector</span><span class="token punctuation">.</span><span class="token function">getBeanInfo</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">PropertyDescriptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> propertyDescriptors <span class="token operator">=</span> beanInfo<span class="token punctuation">.</span><span class="token function">getPropertyDescriptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyDescriptor</span> propertyDescriptor <span class="token operator">:</span> propertyDescriptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>propertyDescriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下：</p><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216145332889.png" alt="image-20221216145332889"></p><p><strong>这里的重点在于：PropertyDescriptor会在Spring3.0之前框架中大量使用</strong></p><h1 id="依赖查找-VS-依赖注入"><a href="#依赖查找-VS-依赖注入" class="headerlink" title="依赖查找 VS 依赖注入"></a>依赖查找 VS 依赖注入</h1><blockquote><p>为什么Spring总会强调后者？而选择性忽略前者呢？</p></blockquote><ul><li>优劣对比</li></ul><table><thead><tr><th>类型</th><th>依赖处理</th><th>实现便利性</th><th>代码侵入性</th><th>API依赖性</th><th>可读性</th></tr></thead><tbody><tr><td>依赖查找</td><td>主动</td><td>繁琐</td><td>高</td><td>依赖容器API</td><td>良好</td></tr><tr><td>依赖注入</td><td>被动</td><td>便利</td><td>低</td><td>不依赖容器API</td><td>一般</td></tr></tbody></table><h2 id="1-1-依赖查找"><a href="#1-1-依赖查找" class="headerlink" title="1.1 依赖查找"></a>1.1 依赖查找</h2><ul><li>根据Bean名称查找<ul><li>实时查找</li><li>延迟查找（<strong>和延迟加载Bean不是一回事</strong>）</li></ul></li><li>根据Bean类型查找<ul><li>单个Bean对象</li><li>多个Bean对象</li></ul></li><li>根据Bean名称 + 类型查找</li><li>根据Java注解查找<ul><li>单个Bean对象</li><li>集合Bean对象</li></ul></li></ul><blockquote><p>根据Bean名称进行查找</p></blockquote><ul><li>实时查找</li><li>延迟查找</li></ul><p><strong>XML配置如下</strong></p><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216154022253.png" alt="image-20221216154022253"></p><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216154038834.png" alt="image-20221216154038834"></p><blockquote><p>根据类型查找Bean</p></blockquote><ul><li>单个Bean查找</li><li>多个Bean查找</li></ul><p>多个Bean得通过 <strong>ListtableBeanFactory</strong> 工厂进行查找</p><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216154543120.png" alt="image-20221216154543120"></p><p><strong>结果如下</strong></p><blockquote><p>实时查找Users{name=’张三’, id=1}<br>查找到所有的User集合对象{user=Users{name=’张三’, id=1}}</p></blockquote><blockquote><p>通过Java注解查找</p></blockquote><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216160812932.png" alt="image-20221216160812932"></p><h2 id="1-2-依赖注入"><a href="#1-2-依赖注入" class="headerlink" title="1.2 依赖注入"></a>1.2 依赖注入</h2><ul><li>根据Bean名称注入</li><li>根据Bean类型注入<ul><li>单个Bean对象</li><li>多个Bean对象</li></ul></li><li>注入容器内建Bean对象</li><li>注入非Bean对象</li><li>注入类型<ul><li>实时</li><li>延迟</li></ul></li></ul><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216163137269.png" alt="image-20221216163137269"></p><blockquote><p>注入容器内建的Bean</p></blockquote><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216163827548.png" alt="image-20221216163827548"></p><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216163923998.png" alt="image-20221216163923998"></p><p><strong>结果如下</strong></p><ol><li><p>org.springframework.beans.factory.support.DefaultListableBeanFactory@1a04f701: defining beans [user,objectFactory,superUser,userRepository,userRepository2]; root of factory hierarchy</p></li><li><p>false</p></li></ol><blockquote><p>延迟注入</p></blockquote><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216164559290.png" alt="image-20221216164559290"></p><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216164645777.png" alt="image-20221216164645777"></p><p><strong>结果如下：</strong></p><ol><li>org.springframework.context.support.ClassPathXmlApplicationContext@2f7c7260, started on Fri Dec 16 16:46:38 GMT+08:00 2022</li><li>true</li></ol><blockquote><p>此时的容器就是当前处理Bean的容器</p></blockquote><h1 id="依赖的来源从哪里来的？"><a href="#依赖的来源从哪里来的？" class="headerlink" title="依赖的来源从哪里来的？"></a>依赖的来源从哪里来的？</h1><h2 id="SpringIOC依赖来源"><a href="#SpringIOC依赖来源" class="headerlink" title="SpringIOC依赖来源"></a>SpringIOC依赖来源</h2><ul><li>自定义Bean</li><li>容器内建Bean</li><li>容器内建依赖</li></ul><blockquote><p>什么是内建Bean</p></blockquote><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216165718999.png" alt="image-20221216165718999"></p><p><strong>结果如下：</strong></p><ol><li>org.springframework.beans.factory.support.<strong>DefaultListableBeanFactory</strong>@1a04f701</li><li><strong>StandardEnvironment</strong> {activeProfiles=[], defaultProfiles=[default], propertySources=[PropertiesPropertySource {name=’systemProperties’}, SystemEnvironmentPropertySource {name=’systemEnvironment’}]}</li></ol><h1 id="IOC的元配置信息"><a href="#IOC的元配置信息" class="headerlink" title="IOC的元配置信息"></a>IOC的元配置信息</h1><h2 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h2><ul><li>Bean定义配置<ul><li>基于XML文件</li><li>基于Properties文件</li><li>基于Java注解</li><li><strong>基于Java API</strong></li></ul></li><li>IOC容器配置<ul><li>基于XML文件</li><li>基于Java注解</li><li>基于Java API</li></ul></li><li>外部化属性配置<ul><li>基于Java注解</li></ul></li></ul><h1 id="BeanFactory和ApplicationContext"><a href="#BeanFactory和ApplicationContext" class="headerlink" title="BeanFactory和ApplicationContext"></a>BeanFactory和ApplicationContext</h1><h2 id="谁才是IOC容器"><a href="#谁才是IOC容器" class="headerlink" title="谁才是IOC容器"></a>谁才是IOC容器</h2><p>ApplicationContext就是BeanFactory，因为是子接口</p><p>BeanFactory是一个基类，而ApplicationContext是超类，作为扩展性企业级接口</p><p>当我们使用BeanFactory直接getBean(BeanFactory)的时候，是无法通过依赖查找的。而Spring注入的依赖并非当前应用上下文ApplicationContext，而是通过组合的方式注入进来的一个代理ApplicationContext</p><p><img src="C:\Users\10841\AppData\Roaming\Typora\typora-user-images\image-20221216174216716.png" alt="image-20221216174216716"></p><h1 id="ApplicationContext除了IOC角色，-还提供哪些功能？"><a href="#ApplicationContext除了IOC角色，-还提供哪些功能？" class="headerlink" title="ApplicationContext除了IOC角色， 还提供哪些功能？"></a>ApplicationContext除了IOC角色， 还提供哪些功能？</h1><ul><li>面向切面（AOP）</li><li>配置元信息（Configuration Metadata）</li><li>资源管理（Resources）</li><li>事件（Events）</li><li>国际化（i18n）</li><li>注解（Annotations）</li><li>Environment抽象（Environment Abstraction）</li></ul><h1 id="BeanFactory和FactoryBean的区别"><a href="#BeanFactory和FactoryBean的区别" class="headerlink" title="BeanFactory和FactoryBean的区别"></a>BeanFactory和FactoryBean的区别</h1><p>BeanFactory是IOC底层容器</p><p>FactoryBean是创建Bean的一种方式，帮助实现复杂的初始化逻辑</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> IOC </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
